package com.fhr.smackjsdemo.utils;

import javax.security.auth.login.Configuration;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManager;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;

/**
 * 基于smack3.2下的封装
 * 参考一下：
 * http://www.zuidaima.com/share/1816369152052224.htm
 * @author fhr
 * @date 2017/04/23
 */
public class XMPPUtil {
	/**
	 * 服务器地址
	 */
	private static final String SERVERADDRESS="";
	/**
	 * 服务器端口
	 */
	private static final int PORT=5222;
	/**
	 * 服务器名称
	 */
	private static final String SERVERNAME="";
	/**
	 * 连接配置对象
	 */
	private static final ConnectionConfiguration CONFIGURATION;
	/**
	 * 利用静态代码段进行配置对象的实例化
	 */
	static{
		//地址+端口形式
		if(SERVERADDRESS!=null&&!SERVERADDRESS.equals("")){
			CONFIGURATION=new ConnectionConfiguration(SERVERADDRESS, PORT);
		}
		//服务器名称形式
		else if(SERVERNAME!=null&&!SERVERNAME.equals("")){
			CONFIGURATION=new ConnectionConfiguration(SERVERNAME);
		}
		else{
			CONFIGURATION=null;
		}
	}
	/**
	 * 工厂模式获取XMPPConnection对象
	 * @return
	 */
	public static XMPPConnection createXMPPConnection(){
		if(CONFIGURATION!=null){
			return new XMPPConnection(CONFIGURATION);
		}
		else{
			return null;
		}
	}
	/**
	 * 连接到服务器
	 * @param xmppConnection
	 * @return
	 */
	public static boolean connectServer(XMPPConnection xmppConnection){
		try {
			xmppConnection.connect();
			return true;
		} catch (XMPPException e) {
			return false;
		}
	}
	/**
	 * 释放xmppConnection
	 * @param xmppConnection
	 */
	public static void relaseXMPPConnection(XMPPConnection xmppConnection){
		if(xmppConnection.isConnected()){
			xmppConnection.disconnect();
		}
		xmppConnection=null;
	}
	/**
	 * 登录
	 * @param xmppConnection
	 * @param userName
	 * @param password
	 * @return
	 */
	public static boolean login(XMPPConnection xmppConnection,String userName,String password){
		try {
			if (!xmppConnection.isConnected()) {
				xmppConnection.connect();
			}
			xmppConnection.login(userName, password);
			return true;
		} catch (XMPPException e) {
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * 登录
	 * @param userName
	 * @param password
	 * @return
	 */
	public static XMPPConnection login(String userName,String password){
		XMPPConnection xmppConnection = createXMPPConnection();
		if (xmppConnection != null) {
			try {
				if (!xmppConnection.isConnected()) {
					xmppConnection.connect();
				}
				xmppConnection.login(userName, password);
			} catch (XMPPException e) {
				e.printStackTrace();
				xmppConnection = null;
			}
		}
		return xmppConnection;
	}
	
	public static Chat createChat(XMPPConnection xmppConnection,String toUser,MessageListener messageListener){
		// 获取当前登陆用户的聊天管理器 
		ChatManager chatManager = xmppConnection.getChatManager();
		// 为指定用户创建一个chat，MyMessageListeners用于监听对方发过来的消息  */
	    Chat chat = chatManager.createChat(toUser+"@" + SERVERNAME, messageListener);
	    return chat;
	}
}
